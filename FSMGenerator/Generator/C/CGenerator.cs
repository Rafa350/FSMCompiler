namespace MikroPicDesigns.FSMCompiler.v1.Generator.C {

    using System;
    using System.IO;
    using MicroCompiler.CodeGenerator.C;
    using MicroCompiler.CodeModel;
    using MikroPicDesigns.FSMCompiler.v1.Model;

    public sealed class CGenerator : GeneratorBase {

        private readonly CGeneratorOptions options;

        public CGenerator(GeneratorParameters generatorParameters) {

            CGeneratorOptions options = new CGeneratorOptions();
            generatorParameters.Populate(options);
            this.options = options;
        }

        public override void Generate(Machine machine) {

            UnitDeclaration unit = MachineUnitGenerator.Generate(machine, options);

            if (String.IsNullOrEmpty(options.OutputType) || (options.OutputType == "MachineHeader")) {
                string header = HeaderGenerator.Generate(unit);
                GenerateMachineHeader(header);
            }

            if (String.IsNullOrEmpty(options.OutputType) || (options.OutputType == "MachineCode")) {
                string code = CodeGenerator.Generate(unit);
                GenerateMachineCode(code);
            }
        }


        /// <summary>
        /// \brief Genera el fitxer de codi de la maquina d'estat.
        /// </summary>
        /// <param name="code">La maquina.</param>
        /// 
        private void GenerateMachineCode(string code) {

            using (StreamWriter writer = File.CreateText(options.MachineCodeFileName)) {

                CodeBuilder codeBuilder = new CodeBuilder();

                codeBuilder
                    .WriteLine("// -----------------------------------------------------------------------")
                    .WriteLine("// Generated by FsmCompiler v1.1")
                    .WriteLine("// Finite state machine compiler tool")
                    .WriteLine("// Copyright 2015-2018 Rafael Serrano (rsr.openware@gmail.com)")
                    .WriteLine("//")
                    .WriteLine("// Warning. Don't touch. Changes will be overwritten!")
                    .WriteLine("//")
                    .WriteLine("// -----------------------------------------------------------------------")
                    .WriteLine()
                    .WriteLine();

                if (!String.IsNullOrEmpty(options.MachineHeaderFileName)) {
                    codeBuilder
                        .WriteLine("#include \"{0}\"", options.MachineHeaderFileName)
                        .WriteLine()
                        .WriteLine();
                }

                codeBuilder
                    .WriteLine(code);

                writer.Write(codeBuilder.ToString());
            }
        }

        /// <summary>
        /// \brief Genera el fitxer de codi de la maquina d'estat.
        /// </summary>
        /// <param name="code">La maquina.</param>
        /// 
        private void GenerateMachineHeader(string header) {

            string guardString = Path.GetFileName(options.MachineHeaderFileName).ToUpper().Replace(".", "_");

            using (StreamWriter writer = File.CreateText(options.MachineHeaderFileName)) {

                CodeBuilder codeBuilder = new CodeBuilder();

                codeBuilder
                    .WriteLine("// -----------------------------------------------------------------------")
                    .WriteLine("// Generated by FsmCompiler v1.1")
                    .WriteLine("// Finite state machine compiler tool")
                    .WriteLine("// Copyright 2015-2020 Rafael Serrano (rsr.openware@gmail.com)")
                    .WriteLine("//")
                    .WriteLine("// Warning. Don't touch. Changes will be overwritten!")
                    .WriteLine("//")
                    .WriteLine("// -----------------------------------------------------------------------")
                    .WriteLine()
                    .WriteLine("#ifndef __{0}__", guardString)
                    .WriteLine("#define __{0}__", guardString)
                    .WriteLine()
                    .WriteLine()
                    .WriteLine(header)
                    .WriteLine()
                    .WriteLine("#endif // __{0}__", guardString);

                writer.Write(codeBuilder.ToString());
            }
        }
    }
}